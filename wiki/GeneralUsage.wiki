#summary General usage information for the CEF framework.

== General Usage ==

A fully functional embedded browser window using CEF can be easily created as follows:
{{{
// Create an instance of our CefClient implementation. Various methods in the
// MyClient instance will be called to notify about and customize browser
// behavior. 
CefRefPtr<CefClient> client(new MyClient());

// Information about the parent window, client rectangle, etc.
CefWindowInfo info;
info.SetAsChild(...);

// Browser initialization settings.
CefBrowserSettings settings;

// Create the new browser window object asynchronously. This eventually results
// in a call to CefLifeSpanHandler::OnAfterCreated().
CefBrowser::CreateBrowser(info, client, "http://www.google.com", settings);
}}}
See cefclient under the tests directory for an example client application.

== File Structure ==

The CEF respository is organized as follows.

  * *include* -- This folder contains the include files that are used by CEF client applications.
  * *libcef* -- This folder contains the libcef implementation.
  * *libcef_dll* -- This folder contains the libcef C API and DLL implementation.
  * *tests* -- This folder contains test applications.
    * *cefclient* -- A simple CEF client application.
    * *unittests* -- Unit tests for CEF interfaces.

== Browser Integration ==

Integration between the client and browser is implemented using delegate interfaces. CefClient is the primary delegate interface and exposes other delegate interfaces that the client can implement. Some supported features include:

  * Windows, Mac OS-X and Linux support
  * Most HTML5 features
  * JavaScript native binding & extension support (cef_v8.h)
  * Off-screen rendering (cef_render_handler.h)
  * Resource request loading, interception and substitution (cef_request_handler.h)
  * Custom scheme handling (cef_scheme.h)
  * Direct DOM access (cef_dom.h)
  * GPU acceleration
  * HTML5 drag&drop support including native callbacks (cef_drag_handler.h)
  * Geolocation support
  * Direct cookie access (cef_cookie.h)
  * Control over user data persistence (cef_cookie.h, cef_storage.h)
  * Browser/frame load and navigation notifications (cef_load_handler.h)
  * Cross-origin white lists (cef_origin_whitelist.h)
  * Custom proxy handling (cef_proxy_handler.h)
  * User-defined cross-process communication (CEF3 only)
  * JavaScript alert, confirm, prompt and onbeforeunload dialog upport (cef_jsdialog_handler.h)
  * Context menu support (cef_menu_handler.h)
  * Printing support (cef_print_handler.h)
  * Keyboard and focus notifications/interception (cef_keyboard_handler.h, cef_focus_handler.h)
  * Search/find support (cef_find_handler.h)
  * Response filtering (cef_content_filter.h)
  * Download handling (cef_download_handler.h)
  * External protocol handling (cef_request_handler.h)
  * Support for making web requests directly from native code (cef_web_urlrequest.h)
  * Modal dialogs
  * Separate UI message loop on Windows (CefSettings.multi_threaded_message_loop)
  * Command line parsing (cef_command_line.h)
  * URL parsing (cef_url.h)
  * XML reading/parsing (cef_xml_reader.h)
  * Zip reading/parsing (cef_zip_reader.h)

For more information about CEF3 supported features see http://magpcss.org/ceforum/viewtopic.php?f=10&t=645.

== Browser Events ==

Application-initiated browser events are delivered to CEF by calling CefBrowser and CefFrame methods.

  * Back, Forward, Reload and Stop Load. Control navigation of browser.
  * Undo, Redo, Cut, Copy, Paste, Delete, Select All. Control selection on the target frame.
  * Print. Print the target frame.
  * Get Source. Retrieve the target frame's HTML source as a string.
  * View Source. Save the target frame's HTML source to a temporary file and open it in the default text viewing application.
  * Load URL. Load the specified URL into the target frame.
  * Load String. Load the specified string into the target frame with an optionally specified dummy URL.
  * Load Stream. Load the specified binary data into the target frame with an optionally specified dummy URL.
  * Load Request. Load the specified request (URL, method, request data and headers) into the target frame.
  * Execute JavaScript. Execute an arbitrary JavaScript command in the target frame.
  * Zoom. Increase or decrease the display size of web content in the target frame.

== Embedded NPAPI Plugins ==

CEF supports the creation of embedded Netscape-style plugins.  Embedded plugins behave the same as normal DLL-based plugins and use the same NPAPI.  Instead of existing as a separate DLL, however, embedded plugins are created by the container application and registered with the system via a call to CefRegisterPlugin().  You will need to include cef_nplugin.h directly to access this functionality.

== JavaScript Extensions ==

CEF supports JavaScript extensions that can interface with native application code. See the CefRegisterExtension() function in cef_v8.h and the "JavaScript Extension Handler" and "UI App Example" tests in the cefclient application for example usage. For more information about JavaScript usage see the JavaScriptIntegration Wiki document.

== Custom Schemes ==

CEF supports registration and handling of custom schemes such as myscheme://mydomain.  See the CefRegisterScheme() function in cef_scheme.h and the "Scheme Handler" test in the cefclient application for example usage.

== Framework Implementation Overview ==

All classes that belong to the chromium embedded framework are prefixed with "Cef".

=== Framework Setup and Tear Down ===

The UI message loop is hosted in a single thread created by the framework.  The client is responsible for setting up and shutting down this thread for each process that uses the framework by calling CefInitialize() and CefShutdown() respectively. On Windows the UI message loop can be run on a separate thread using the CefSettings.multi_threaded_message_loop setting.

=== Reference Counting ===

All framework classes implement the CefBase interface and all instance pointers are handled using the CefRefPtr smart pointer implementation that automatically handles reference counting via calls to AddRef() and Release().

=== Platform Neutrality ===

The CEF framework is designed to be platform neutral.  It currently supports Windows, Mac OS-X and Linux.  In order to make multi-platform support as painless as possible the framework defines a set of implementation-neutral interfaces and typedef's that wrap platform-dependent behavior.

=== Thread Safety ===

All implementations of framework interfaces must be safe for access from multiple threads unless otherwise noted.  The IMPLEMENT_REFCOUNTING macro provides atomic AddRef() and Release() implementations.  The IMPLEMENT_LOCKING macro provides Lock() and Unlock() methods for synchronizing access to blocks of code.

=== Framework Interfaces ===

The framework defines the following basic interfaces.

  * *CefBrowser* is the main browser window class. A new browser window is created by calling the static CreateBrowser() or CreateBrowserSync() methods.
  * *CefFrame* represents a single frame in the browser window.  Each browser window also has a top-level main frame that can be accessed via the GetMainFrame() method.
  * *CefClient* is the main browser delegate interface passed into the CreateBrowser() method.
  * *CefRequest* represents request data such as url, method, post data and headers.
  * *CefSchemeHandlerFactory* is used to handle requests using custom schemes such as myscheme://mydomain.
  * *CefReadHandler* and *CefWriteHandler* are simple interfaces for reading and writing data.
  * *CefV8Handler*, *CefV8Value* and *CefV8Context* are used to create and access JavaScript objects.

See header files in the include directory for complete API documentation.
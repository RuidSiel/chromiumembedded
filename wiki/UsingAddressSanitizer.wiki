#summary How to use AddressSanitizer with CEF-based applications.

== Overview ==

[https://code.google.com/p/address-sanitizer/ AddressSanitizer] (ASan) is a fast memory error detector based on compiler instrumentation (LLVM). The below instructions relate to using ASan with CEF-based applications on Linux. ASan is also supported on OS X and Windows (experimental) but usage with CEF has not been tested on those platforms. For examples of ASan output see [https://code.google.com/p/chromiumembedded/issues/detail?id=1457 this bug], [https://code.google.com/p/chromiumembedded/issues/detail?id=1458 this bug] and [https://code.google.com/p/javachromiumembedded/issues/detail?id=137#c5 this bug].

== System Setup ==

The below instructions are based on the CEF 2171 branch built on an Ubuntu 14 LTS 64-bit Linux system. To set up this system:

1. Install [http://www.ubuntu.com/download/desktop Ubuntu 14 LTS 64-bit]. This can be done using dedicated hardware or a [http://www.vmware.com/products/player VMware], [http://www.parallels.com/eu/products/desktop/download/ Parallels] or [https://www.virtualbox.org/wiki/Downloads VirtualBox] virtual machine. At least 6GB of RAM and 30GB of disk space are required to successfully build Chromium/CEF.

2. Install the required build dependencies (full instructions are [https://code.google.com/p/chromium/wiki/LinuxBuildInstructionsPrerequisites here]).

{{{
# Download the install-build-deps.sh script at the correct revision (initially base64 encoded).
wget -O install-build-deps.txt https://chromium.googlesource.com/chromium/src/+/fedbbb0aa762826ba2fc85a2b934dc9660639aa7/build/install-build-deps.sh?format=TEXT
# Decode the script.
python -m base64 -d install-build-deps.txt > install-build-deps.sh
# Mark the script as executable.
chmod 755 install-build-deps.sh

# Run the script excluding unnecessary components.
sudo ./install-build-deps.sh --no-lib32 --no-arm --no-chromeos-fonts --no-nacl

# Install additional packages required by cefclient.
sudo apt-get install libgtkglext1-dev
}}}

3. Download Chromium and CEF source code at the correct branch and without building (see [https://code.google.com/p/chromiumembedded/wiki/BranchesAndBuilding BranchesAndBuilding] for complete CEF build instructions).

{{{
python automate-git.py --download-dir=/path/to/chromium_git --depot-tools-dir=/path/to/depot_tools --no-distrib --no-build --force-clean --branch=2171
}}}

4. Add depot_tools to the PATH.

{{{
export PATH=/path/to/depot_tools:$PATH
}}}

== Building CEF with ASan ==

To build Chromium/CEF with ASan enabled follow these steps:

1. Configure Chromium to build using ASan (see [http://www.chromium.org/developers/testing/addresssanitizer Testing/AddressSanitizer] for complete Chromium-related ASan instructions).

{{{
export GYP_DEFINES='asan=1'
}}}

2. Generate CEF project files.

{{{
cd /path/to/chromium_git/chromium/src/cef
./cef_create_projects.sh
}}}

3. Create a Release build of CEF. ASan must always be used with Release builds.

{{{
cd /path/to/chromium_git/chromium/src
ninja -C out/Release cefclient cefsimple cef_unittests chrome_sandbox
}}}

4. Run the resulting executable and pipe output to the ASan post-processing script so that stack traces will be symbolized.

{{{
cd /path/to/chromium_git/chromium/src
./out/Release/cef_unittests 2>&1 | tools/valgrind/asan/asan_symbolize.py
}}}

== Using CEF and ASan with third-party executables ==

ASan on Linux is built as a static library by default. This works fine with applications like cefclient and cef_unittests that are built at the same time as libcef and consequently specify the “-fsanitize=address” flag. However, in order to use libcef and ASan with pre-built third-party executables (e.g. Java and [https://code.google.com/p/javachromiumembedded/ JCEF]) it’s necessary to build ASan as a shared library (see [https://code.google.com/p/address-sanitizer/issues/detail?id=271 here] for more information). This works as follows (see step #8 below for an example):

A. The ASan library (“libclang_rt.asan-x86_64.so” on 64-bit Linux) is specified via LD_PRELOAD so that it will be loaded into the main executable at runtime.

B. The main executable delay loads “libcef.so” which depends on “libc++.so” and “libclang_rt.asan-x86_64.so” provided by the Chromium Clang build.

C. Output is piped to the ASan post-processing script in order to symbolize stack traces.

To build ASan as a shared library the following changes are required to Chromium’s default Clang build and GYP configuration:

1. Create a custom build of Clang with ASan configured as a shared library.

A. Edit the “tools/clang/scripts/update.sh” script and add "-DCOMPILER_RT_BUILD_SHARED_ASAN=ON" to all CMake command-lines (see [https://code.google.com/p/address-sanitizer/wiki/AsanAsDso AsanAsDso] and [https://code.google.com/p/address-sanitizer/wiki/HowToBuild HowToBuild] for more information).

{{{
diff --git tools/clang/scripts/update.sh tools/clang/scripts/update.sh
index eabed4b..d020bbe 100755
--- tools/clang/scripts/update.sh
+++ tools/clang/scripts/update.sh
@@ -357,6 +357,7 @@ if [[ -n "${bootstrap}" ]]; then
   pushd "${LLVM_BOOTSTRAP_DIR}"
 
   cmake -GNinja \
+      -DCOMPILER_RT_BUILD_SHARED_ASAN=ON \
       -DCMAKE_BUILD_TYPE=Release \
       -DLLVM_ENABLE_ASSERTIONS=ON \
       -DLLVM_TARGETS_TO_BUILD=host \
@@ -432,6 +433,7 @@ fi
 
 rm -fv CMakeCache.txt
 MACOSX_DEPLOYMENT_TARGET=${deployment_target} cmake -GNinja \
+    -DCOMPILER_RT_BUILD_SHARED_ASAN=ON \
     -DCMAKE_BUILD_TYPE=Release \
     -DLLVM_ENABLE_ASSERTIONS=ON \
     -DLLVM_ENABLE_THREADS=OFF \
@@ -469,6 +471,7 @@ pushd "${COMPILER_RT_BUILD_DIR}"
 
 rm -fv CMakeCache.txt
 MACOSX_DEPLOYMENT_TARGET=${deployment_target} cmake -GNinja \
+    -DCOMPILER_RT_BUILD_SHARED_ASAN=ON \
     -DCMAKE_BUILD_TYPE=Release \
     -DLLVM_ENABLE_ASSERTIONS=ON \
     -DLLVM_ENABLE_THREADS=OFF \
@@ -511,6 +514,7 @@ if [[ -n "${with_android}" ]]; then
   pushd ${LLVM_BUILD_DIR}/android
   rm -fv CMakeCache.txt
   MACOSX_DEPLOYMENT_TARGET=${deployment_target} cmake -GNinja \
+      -DCOMPILER_RT_BUILD_SHARED_ASAN=ON \
       -DCMAKE_BUILD_TYPE=Release \
       -DLLVM_ENABLE_ASSERTIONS=ON \
       -DLLVM_ENABLE_THREADS=OFF \
@@ -538,6 +542,7 @@ mkdir -p "${TOOL_BUILD_DIR}"
 pushd "${TOOL_BUILD_DIR}"
 rm -fv CMakeCache.txt
 MACOSX_DEPLOYMENT_TARGET=${deployment_target} cmake -GNinja  \
+    -DCOMPILER_RT_BUILD_SHARED_ASAN=ON \
     -DLLVM_BUILD_DIR="${ABS_LLVM_BUILD_DIR}" \
     -DLLVM_SRC_DIR="${ABS_LLVM_DIR}" \
     -DCMAKE_C_COMPILER="${CC}" \
}}}

B. Run the “tools/clang/scripts/update.sh” script to create a local build of Clang.

{{{
cd /path/to/chromium_git/chromium/src
./tools/clang/scripts/update.sh --force-local-build --without-android
}}}

This will create “libclang_rt.asan-x86_64.so” (assuming 64-bit Linux) in the “third_party/llvm-build/Release+Asserts/lib/clang/3.6.0/lib/linux” directory.

2. Copy “libclang_rt.asan-x86_64.so” to the “out/Release/lib” directory so that binaries built as part of the Chromium build can find it.

3. Add '-shared-libasan' or modify related exclusions everywhere that ‘-fsanitize=address’ is mentioned for Linux in “build/common.gypi”, “build/sanitizers/sanitizers.gyp”, “sandbox/linux/sandbox_linux.gypi” and “third_party/libvpx/libvpx.gyp” (see [https://code.google.com/p/address-sanitizer/wiki/AsanAsDso AsanAsDso] for details). Also, specify '-mllvm -asan-globals=0' in “base/common.gypi” (see [https://code.google.com/p/address-sanitizer/issues/detail?id=82#c18 here] for details).

{{{
diff --git build/common.gypi build/common.gypi
index f3f28c7..a0b2623 100644
--- build/common.gypi
+++ build/common.gypi
@@ -4119,14 +4122,16 @@
               ['_toolset=="target"', {
                 'cflags': [
                   '-fsanitize=address',
+                  '-shared-libasan',
                 ],
                 'ldflags': [
                   '-fsanitize=address',
+                  '-shared-libasan',
                 ],
               }],
             ],
             'conditions': [
-              ['OS=="mac"', {
+              ['OS=="mac" or OS=="linux"', {
                 'cflags': [
                   '-mllvm -asan-globals=0',  # http://crbug.com/352073
                 ],
@@ -4718,9 +4723,11 @@
               # binaries on x86_64 host is problematic.
               # TODO(eugenis): re-enable.
               '-fsanitize=address',
+              '-shared-libasan',
             ],
             'ldflags!': [
               '-fsanitize=address',
+              '-shared-libasan',
               '-Wl,-z,noexecstack',
               '-Wl,--gc-sections',
               '-Wl,-O1',
diff --git build/sanitizers/sanitizers.gyp build/sanitizers/sanitizers.gyp
index d971d6d..065ed66 100644
--- build/sanitizers/sanitizers.gyp
+++ build/sanitizers/sanitizers.gyp
@@ -40,6 +40,7 @@
       'cflags/': [
         ['exclude', '-fsanitize='],
         ['exclude', '-fsanitize-'],
+        ['exclude', '-shared-libasan'],
       ],
       'direct_dependent_settings': {
         'ldflags': [
diff --git sandbox/linux/sandbox_linux.gypi sandbox/linux/sandbox_linux.gypi
index adcfd3f..699b70f 100644
--- sandbox/linux/sandbox_linux.gypi
+++ sandbox/linux/sandbox_linux.gypi
@@ -200,9 +200,11 @@
       # Do not use any sanitizer tools with this binary. http://crbug.com/382766
       'cflags/': [
         ['exclude', '-fsanitize'],
+        ['exclude', '-shared-libasan'],
       ],
       'ldflags/': [
         ['exclude', '-fsanitize'],
+        ['exclude', '-shared-libasan'],
       ],
     },
     { 'target_name': 'sandbox_services',
diff --git libvpx.gyp libvpx.gyp
index 4f8cb2b..19a179c 100644
--- third_party/libvpx/libvpx.gyp
+++ third_party/libvpx/libvpx.gyp
@@ -386,9 +386,9 @@
       ],
       'conditions': [
         ['asan==1', {
-          'cflags!': [ '-fsanitize=address' ],
+          'cflags!': [ '-fsanitize=address', '-shared-libasan' ],
           'xcode_settings': { 'OTHER_CFLAGS!': [ '-fsanitize=address' ] },
-          'ldflags!': [ '-fsanitize=address' ],
+          'ldflags!': [ '-fsanitize=address', '-shared-libasan' ],
         }],
         ['OS=="win"', {
           'msvs_settings': {
}}}

4. Configure Chromium to build using ASan (see [http://www.chromium.org/developers/testing/addresssanitizer Testing/AddressSanitizer] for complete Chromium-related ASan instructions).

{{{
export GYP_DEFINES='asan=1'
}}}

5. Generate CEF project files.

{{{
cd /path/to/chromium_git/chromium/src/cef
./cef_create_projects.sh
}}}

6. Create a Release build of CEF. ASan must always be used with Release builds.

{{{
cd /path/to/chromium_git/chromium/src
ninja -C out/Release cefclient cefsimple cef_unittests chrome_sandbox.
}}}

7. Copy “libcef.so”, “libc++.so” and “libclang_rt.asan-x86_64.so” from the “out/Release/lib” directory to the third-party project’s binary directory (e.g. “out/Debug” for JCEF).

8. Run the third-party executable pre-loading “libclang_rt.asan-x86_64.so” and piping output to the ASan post-processing script so that stack traces will be symbolized. For example, using JCEF’s [https://code.google.com/p/javachromiumembedded/source/browse/trunk/src/tools/run.sh run.sh script]:

{{{
LD_PRELOAD=$LIB_PATH/libclang_rt.asan-x86_64.so java -cp "$CLS_PATH" -Djava.library.path=$LIB_PATH tests.$RUN_TYPE.MainFrame "$@" 2>&1 | /path/to/chromium_git/chromium/src/tools/valgrind/asan/asan_symbolize.py
}}}
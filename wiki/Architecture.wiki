#summary Overview of the CEF architecture.

== Background ==

The Chromium Embedded Framework (CEF) is an open source project founded by Marshall Greenblatt in 2008 to develop a Web browser control based on the [http://www.chromium.org/Home Google Chromium] project. CEF currently supports a range of programming languages and operating systems and can be easily integrated into both new and existing applications. It was designed from the ground up with both performance and ease of use in mind. The base framework includes C and C++ programming interfaces exposed via native libraries that insulate the host application from Chromium and WebKit implementation details. It provides close integration between the browser control and the host application including support for custom plugins, protocols, JavaScript objects and JavaScript extensions. The host application can optionally control resource loading, navigation, context menus, printing and more, while taking advantage of the same performance and HTML5 technologies available in the Google Chrome Web browser. 

== Dependencies ==

The CEF project depends on a number of other projects maintained by third parties. The major projects that CEF depends on are:

  * [http://www.chromium.org/Home Chromium] - Provides general functionality like network stack, threading, message loop, logging and process control needed to create a fully functional Web browser. Implements "platform" code that allows WebKit to communicate with V8 and Skia. Many Chromium design documents can be found at http://dev.chromium.org/developers.
  * [http://www.webkit.org/ WebKit] - Provides DOM parsing, layout, event handling, rendering and HTML5 JavaScript APIs. Some HTML5 implementations are split between the WebKit and Chromium code bases.
  * [http://code.google.com/p/v8/ V8] - JavaScript engine.
  * [http://code.google.com/p/skia/ Skia] - 2D graphics library used for rendering non-accelerated content. More information on how Chromium integrates Skia is available [http://www.chromium.org/developers/design-documents/graphics-and-skia here].
  * [http://code.google.com/p/angleproject/ Angle] - 3D graphics translation layer for Windows that converts GLES calls to DirectX. More information about accelerated compositing is available [http://dev.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome here].

== Versions ==

There have been three versions of CEF to date.

  * CEF1 - Single process implementation using the [http://trac.webkit.org/wiki/Chromium Chromium WebKit API].
  * CEF2 - Multi process implementation built on the Chromium browser.
  * CEF3 - Multi process implementation using the [http://www.chromium.org/developers/content-module/content-api Chromium Content API].

== Common API Usage ==

All versions of CEF expose a simple, easy-to-use API designed to insulate users from the underlying Chromium and WebKit code complexity. Common usage is as follows:

1. Initialize CEF by calling CefInitialize().

2. Perform work on the UI message loop by calling CefRunMessageLoop() or CefDoMessageLoopWork().

3. Create a browser window by calling CreateBrowser() or CreateBrowserSync() and passing in a CefClient instance.

4. Shut down CEF by calling CefShutdown() before the application exits.

== C Wrapper API ==

The libcef shared library exports a C API that isolates the user from the CEF runtime and code base. The libcef_dll_wrapper project, which is distributed in source code form as part of the binary release, wraps this exported C API in a C++ API that is then linked into the client application. The code for this C/C++ API translation layer is automatically generated by the [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/tools/translator.README.txt translator] tool. Direct usage of the C API is described on the UsingTheCAPI Wiki page.

== CEF1 ==

The single process architecture used by CEF1 integrates Chromium and WebKit directly into the client application. Advantages to the single process arcitecture include reduced memory usage and closer integration with the client application. Disadvantages include [http://code.google.com/p/chromiumembedded/issues/detail?id=304 reduced performance] with certain types of accelerated content and [http://code.google.com/p/chromiumembedded/issues/detail?id=242 crashes] due to plugins like Flash running in the same process.

=== API Usage ===

Below is an overview of the main CEF1 interfaces and their uses. For more information on specific supported features and interfaces visit the GeneralUsage Wiki page or browse the CEF1 include files.

  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/include/cef_app.h CefApp] - This interface is passed to CefInitialize() and allows the application to customize global functionality like resource loading and proxy handling.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/include/cef_client.h CefClient] - This interface is passed to CefCreateBrowser() or CefCreateBrowserSync() and acts as the connection between an individual CEF browser instance and the client application. Additional interfaces for request handling, display handling, etc. are exposed via this interface.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/include/cef_browser.h CefBrowser] - Exposes capabilities provided by the browser. This includes back/forward navigation, source retrieval, request loading, etc. A single CefBrowser may have one or more child [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/include/cef_frame.h CefFrame] objects.

=== Threading Considerations ===

CEF1 includes UI, IO and FILE threads. The UI thread creates browser windows and is used for all interaction with WebKit and V8. The IO thread is used for handling schema and network requests. The FILE thread is used for the application cache and other miscellaneous activities.

When using CEF1 you should keep the following threading considerations in mind:

  * Do not perform blocking operations on the UI thread. This can lead to serious performance issues.
  * The UI thread will be the same as the main application thread if CefInitialize() is called with a CefSettings.multi_threaded_message_loop value of false.
  * All WebKit and V8 interation must take place on the UI thread. Consequently, some CEF API functions can only be called on the UI thread. Functions that have this limitation will be documented accordingly in the associated CEF header file.
  * The [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/include/cef_task.h CefPostTask] method can be used to post tasks asnychronously between the various threads.

=== Implementation Details ===

CEF1 has the following major implementation classes:

  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/libcef/cef_context.h CefContext] - Represents the global CEF context. A single CefContext object is created by CefInitialize() and destroyed by CefShutdown().
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/libcef/cef_process.h CefProcess] - Used by CefContext to create and manage the CEF threads.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/libcef/browser_webkit_init.h BrowserWebKitInit] - Manages the global WebKit environment as exposed by the [http://trac.webkit.org/wiki/Chromium Chromium WebKit API].
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/libcef/webview_host.h WebViewHost] - Provides the native window "wrapper" implementation for a WebView. This class extends [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/libcef/webwidget_host.h WebWidgetHost] which provides functionality shared in common with popup widgets (like select menus) on some platforms.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/libcef/browser_impl.h CefBrowserImpl] - Implements the CefBrowser interface, creates the WebViewHost and provides the glue code for a single browser instance.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef1/libcef/browser_webview_delegate.h BrowserWebViewDelegate] - Implements the WebKit interfaces that provide communication between CefBrowserImpl and the underlying WebView.


== CEF2 ==

CEF2 was discontinued when Chromium announced support for the Content API. Information about CEF2 can be found [http://magpcss.org/ceforum/viewtopic.php?f=10&t=122 here].


== CEF3 ==

CEF3 uses the same multi process architecture as the Chromium Web browser via the [http://www.chromium.org/developers/content-module/content-api Chromium Content API]. This architecture provides a number of advantages over the single process architecture used by CEF1:

  * Support for both single-process and multi-process run modes.
  * More code sharing with the Chromium browser.
  * Improved performance and less breakage due to use of the "supported" code path.
  * Faster access to new features.

In most cases CEF3 will have the same performance and stability characteristics as the Chromium Web browser. Information about CEF3 development status can be found [http://magpcss.org/ceforum/viewtopic.php?f=10&t=645 here].

=== API Usage ===

CEF3 initialization needs to account for multiple processes. All processes may share the same executable and application entry point function on Windows and Linux, or sub-processes may optionally use a separate executable. On Mac OS-X the sub-processes must be launched using a separate app bundle. This is necessary becaue on Mac OS-X the sub-processes must have a different Info.plist file.

The CefExecuteProcess() function examines command-line flags to determine the type of process currently being executed. If executing the main process as determined by the function return value continue with standard process initialization as described in the "Common API Usage" section.
See [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_app.h cef_app.h] for a complete description of initialization functions and their usage. See the [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/tests/cefclient/cefclient_win.cpp cefclient_win.cpp] wWinMain function for an example implementation on Windows.

Below is an overview of the main CEF3 interfaces and their uses. For more information on specific supported features and interfaces visit the GeneralUsage Wiki page or browse the CEF3 include files.

  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_app.h CefApp] - This interface is passed to CefExecuteProcess() and allows the application to customize global functionality like resource loading and proxy handling. Some functionality is shared by all processes, some must be implemented in the browser process and some must be implemented in the render process. See comments in the header file for details.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_client.h CefClient] - This interface is passed to CefCreateBrowser() or CefCreateBrowserSync() in the browser process and acts as the connection between an individual CEF browser instance and the client application in the browser process. Additional interfaces for request handling, display handling, etc. are exposed via this interface.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_browser.h CefBrowser] - Exposes capabilities provided by the browser in both the browser and render processes. This includes back/forward navigation and source retrieval. A single CefBrowser may have one or more child [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_frame.h CefFrame] objects. Some methods must be called in a specific process or thread so read the documentation carefully.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_browser.h CefBrowserHost] - Exposes functionality related to hosting the browser window that is only available in the browser process. For example, retriving the native parent window handle or destroying the browser window.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_render_process_handler.h CefRenderProcessHandler] - Exposes WebKit and V8 integration capabilities to the application in the render process. An instance of this object is returned via CefApp.

=== Process Considerations ===

CEF3 uses a number of processes for different purposes.

  * Browser process - This process is the same as the client application.
  * Render process - Web content (WebKit and V8) is hosted in a separate process.
  * Plugin process - Plugins like Flash are hosted in a separate process. More information about the plugin architecture is available [http://www.chromium.org/developers/design-documents/plugin-architecture here].
  * GPU process - Accelerated content is rendered in a separate process. More information about accelerated compositing is available [http://dev.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome here].
  * Utility process - Some miscellaneous tasks are executed in a separate process.

The Chromium process model as a whole is described in detail [http://www.chromium.org/developers/design-documents/multi-process-architecture here] and [http://www.chromium.org/developers/design-documents/process-models here].

The various CEF processes communicate using [http://www.chromium.org/developers/design-documents/inter-process-communication inter-process communication]. CefBrowser and CefFrame exist in both the browser and render processes and are passed as arguments to various callbacks. A [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_process_message.h CefProcessMessage] can be sent from and delivered to a particular browser in a particular process using the CefBrowser::SendProcessMessage function and the OnProcessMessageRecieved callback in CefClient (browser process) and CefRenderProcessHandler (render process). See the "JavaScript Binding" example in the cefclient application for sample usage.

XMLHttpRequest (XHR), WebSockets or similar can also be used for communication between processes. For example, an XHR request can be sent from JavaScript running in the render process to a resource handler implemented in the browser process via [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_request_handler.h CefRequestHandler::GetResourceHandler] or a [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_scheme.h custom scheme handler].

=== Threading Considerations ===

CEF1 includes a number of threads as described in the [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/internal/cef_types.h cef_types.h] cef_thread_id enumeration. When using these threads pay close attention to how they are intended to be used and what process they're supported in as documented in that header file.

When using CEF3 you should keep the following threading considerations in mind:

  * Do not perform blocking operations on any thread other than the browser process FILE thread. This can lead to serious performance issues.
  * The UI thread will be the same as the main application thread if CefInitialize() is called with a CefSettings.multi_threaded_message_loop value of false.
  * All WebKit and V8 interation must take place on the render process RENDERER thread.
  * The [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/include/cef_task.h CefPostTask] method can be used to post tasks asnychronously between the various threads in the same process.

=== Implementation Details ===

CEF3 has the following major implementation classes:

  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/libcef/common/main_delegate.h CefMainDelegate] - Implements the common process bootstrap logic.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/libcef/common/content_client.h CefContentClient] - Implements the Content API callbacks that are common to all processes.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/libcef/browser/browser_main.h CefBrowserMainParts] - Implements the browser process bootstrap logic.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/libcef/browser/content_browser_client.h CefContentBrowserClient] - Implements the Content API callbacks for the browser process.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/libcef/browser/browser_host_impl.h CefBrowserHostImpl] - Implements the CefBrowser and CefBrowserHost interfaces in the browser process. Provides the glue code and implements interfaces for communicating with the RenderViewHost.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/libcef/renderer/content_renderer_client.h CefContentRendererClient] - Implements the Content API callbacks for the render process.
  * [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/libcef/renderer/browser_impl.h CefBrowserImpl] - Implements the CefBrowser interface in the render process. Provides the glue code and implements interfaces for communicating with the RenderView.
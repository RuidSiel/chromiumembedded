#summary Information about CEF branches and instructions for downloading, building and packaging source code.

== Background ==

The CEF project is an extension of the Chromium project hosted at http://www.chromium.org. CEF maintains development and release branches that track Chromium branches. CEF source code can be built manually or with automated tools.

== Development ==

Ongoing development of CEF occurs in [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Ftrunk trunk]. This location tracks the current [http://src.chromium.org/viewvc/chrome/trunk/ Chromium trunk] and is not recommended for production use.

The following URLs should be used for downloading development versions of CEF.

  * CEF3 - http://chromiumembedded.googlecode.com/svn/trunk/cef3

CEF1 is no longer actively developed or supported. See the [http://magpcss.org/ceforum/viewtopic.php?f=10&t=10647 CEF1 Retirement Plan] for details.

== Release Branches ==

CEF provides release branches that track specific Chromium releases. Users developing applications for production environments are encouraged to use release branches for the following reasons:

  * Binary CEF builds are tied to specific Chromium releases.
  * Release versions of CEF/Chromium are better tested and more appropriate for release applications.
  * Within a release branch the CEF API is "frozen" and generally only security/bug fixes are applied.
  * CEF release branches can include patches to Chromium/Blink source if necessary.
  * CEF trunk development won't interfere with consumer release schedules.

CEF release version numbers have the format X.Y.Z where X is the CEF version (1 or 3), Y is the release branch and Z is the CEF revision number. Detailed Chromium and CEF version information is available in the include/cef_version.h header file that will be created during the build process.

Current CEF release branches and associated platform build requirements are as follows.

|| Branch Date || Release Branch || Chromium Version || CEF1 || CEF3 || Windows Build Requirements || Mac OS X Build Requirements || Linux Build Requirements ||
|| Dec 2011 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F963 963] || 17 || Yes || No || WinXP+, VS2008, Win7 SDK || OS X 10.6-10.7, 10.5+ SDK, Xcode 3.2.6 || Ubuntu 10.04+, Debian Squeeze+ ||
|| Feb 2012 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1025 1025] || 18 || Yes || No || WinXP+, VS2008, Win7 SDK || OS X 10.6-10.7, 10.5+ SDK, Xcode 3.2.6-4.x || Ubuntu 10.04+, Debian Squeeze+ ||
|| Apr 2012 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1084 1084] || 19 || Yes || No || WinXP+, VS2008, Win7 SDK || OS X 10.6-10.7, 10.5+ SDK, Xcode 3.2.6-4.x || Ubuntu 10.04+, Debian Squeeze+ ||
|| Aug 2012 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1180 1180] || 21 || Yes || Yes || WinXP+, VS2010, Win7 SDK || OS X 10.6-10.7, 10.5+ SDK, Xcode 3.2.6-4.x || Ubuntu 12.04+, Debian Squeeze+ ||
|| Oct 2012 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1271 1271] || 23 || Yes || Yes || WinXP+, VS2010, Win7 SDK || OS X 10.6-10.8, 10.6+ SDK, Xcode 3.2.6-4.x || Ubuntu 12.04+, Debian Squeeze+ ||
|| Jan 2013 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1364 1364] || 25 || Yes || Yes || WinXP+, VS2010, Win8 SDK, Ninja (optional) || OS X 10.6-10.8, Xcode 3.2.6-4.x, Ninja (optional) || Ubuntu 12.04+, Debian Squeeze+, Ninja (optional) ||
|| Apr 2013 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1453 1453] || 27 || Yes || Yes || WinXP+, VS2010, Win8 SDK, Ninja (optional) || OS X 10.6-10.8, 10.6+ SDK, Xcode 3.2.6-4.x, Ninja (optional) || Ubuntu 12.04+, Debian Squeeze+, Ninja (optional) ||
|| Jul 2013 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1547 1547] || 29 || No  || Yes || WinXP+, VS2010-2012, Win8 SDK, Ninja (optional) || OS X 10.6-10.8, 10.6+ SDK, Xcode 3.2.6-4.x, Ninja (optional) || Ubuntu 12.04+, Debian Squeeze+, Ninja ||
|| Oct 2013 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1650 1650] || 31 || No  || Yes || WinXP+, VS2010-2012, Win8 SDK, Ninja (optional) || OS X 10.6-10.9, 10.6+ SDK, Xcode 3.2.6-5.x, Ninja || Ubuntu 12.04+, Debian Wheezy+, Ninja ||
|| Jan 2014 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1750 1750] || 33 || No  || Yes || WinXP+, VS2010-2013, Win8 SDK, Ninja || OS X 10.6-10.9, 10.6+ SDK, Xcode 3.2.6-5.x, Ninja || Ubuntu 12.04+, Debian Wheezy+, Ninja ||
|| Apr 2014 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F1916 1916] || 35 || No  || Yes || WinXP+, VS2013, Win8 SDK, Ninja || OS X 10.6-10.9, 10.6+ SDK, Xcode 3.2.6-5.x, Ninja || Ubuntu 12.04+, Debian Wheezy+, Ninja ||
|| Aug 2014 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F2062 2062] || 37 || No  || Yes || WinXP+, VS2013, Win8 SDK, Ninja || OS X 10.6-10.9, 10.6+ SDK, Xcode 3.2.6-5.x, Ninja || Ubuntu 12.04+, Debian Wheezy+, Ninja ||
|| Oct 2014 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F2171 2171] || 39 || No  || Yes || WinXP+, VS2013u4, Win8.1 SDK, Ninja || OS X 10.6-10.9, 10.6+ SDK, Xcode 3.2.6-5.x, Ninja || Ubuntu 12.04+, Debian Wheezy+, Ninja ||
|| Jan 2015 || [http://code.google.com/p/chromiumembedded/source/browse/#svn%2Fbranches%2F2272 2272] || 41 || No  || Yes || WinXP+, VS2013u4, Win8.1 SDK, Ninja || OS X 10.6-10.10, 10.6+ SDK, Xcode 3.2.6-5.x, Ninja, 64-bit only || Ubuntu 12.04+, Debian Wheezy+, Ninja ||


The following URLs should be used for downloading release verisons of CEF where YYYY is the release branch number.

  * CEF1 - http://chromiumembedded.googlecode.com/svn/branches/YYYY/cef1
  * CEF3 - http://chromiumembedded.googlecode.com/svn/branches/YYYY/cef3

Note that the 963 and 1025 branches contain only CEF1 source code (no "cef1" subfolder exists for those branch directories).

Information about how CEF release branches are created is available [http://code.google.com/p/chromiumembedded/issues/detail?id=325 here].

== Building from Source ==

Building from source code is currently supported on Windows, Mac OS X and Linux environments.

  * Building on most platforms will require at least 4GB of system memory.
  * Mac OS X - The combination of build OS version and SDK version will determine the platforms supported by the resulting binaries.
    * If built on 10.6 using the 10.5 SDK the resulting executables will run on 10.5+.
    * If built on 10.7+ using the 10.6 SDK the resulting executables will run on 10.6+.
  * Linux - CEF is developed and tested using Ubuntu and Debian. It should be possible to build and run CEF on other compatible Linux distributions but this is untested.

To build Chromium and CEF from source code you must start by configuring your build environment.

1. Install the build prerequisites for your operating system and development environment.

  * Windows - http://www.chromium.org/developers/how-tos/build-instructions-windows.
    * If performing an SVN checkout use a version 1.6.x SVN client as some people have reported problems with version 1.7.x. Version 1.6.x is included with depot_tools on Windows. A 1.6.X version of TortoiseSVN for Windows can be downloaded [http://sourceforge.net/projects/tortoisesvn/files/1.6.16/Application/ here].
  * Mac OS X - http://code.google.com/p/chromium/wiki/MacBuildInstructions
  * Linux - http://code.google.com/p/chromium/wiki/LinuxBuildInstructions.
    * Starting with CEF3 revision 1294 (June 2013) a dependency on the libgtkglext1-dev package has been added to support the off-screen rendering example in cefclient. This is only a requirement for cefclient and not a requirement for other applications using CEF.

2. Configure environment settings that will effect the [http://code.google.com/p/gyp/ GYP] build. For example:

{{{
# On Windows building with Ninja and debugging using the VS2013 IDE.
set GYP_GENERATORS=ninja,msvs-ninja
set GYP_MSVS_VERSION=2013

# On OS X or Linux building with Ninja and debugging using the console.
export GYP_GENERATORS=ninja

# On OS X building a 64-bit build with Ninja and debugging using the console.
export GYP_GENERATORS=ninja
# Set target_arch with branch 2171 or older. OS X will generate 64-bit builds by default
# starting with branch 2272.
export GYP_DEFINES=target_arch=x64
}}}

  * CEF does not currently support component builds.
  * All newer branches (>=1364) and platforms support building with [https://code.google.com/p/chromium/wiki/NinjaBuild Ninja]. It is recommended to use Ninja when building CEF/Chromium instead of platform build tools like Visual Studio, Xcode or make. Set `GYP_GENERATORS=ninja` to manually create a Ninja build or pass the “--ninja-build” command-line flag to automate.py (see below).
  * When performing a 64-bit build on Windows (any branch) or OS X (branch 2171 or older) set `GYP_DEFINES=target_arch=x64`. Linux by default will perform a built appropriate to the system (32-bit build on 32-bit system and 64-bit build on 64-bit system). To perform a 32-bit Linux build on a 64-bit Linux system see [https://code.google.com/p/chromium/wiki/LinuxBuild32On64 here].
  * Windows -
    * If multiple versions of Visual Studio are installed on your system you can set the GYP_MSVS_VERSION environment variable to create project files for that version. For example, set the value to "2010" for VS2010 or "2010e" for VS2010 Express. Check the Chromium documentation for the correct value when using other Visual Studio versions.
    * Beginning in July 2012 most Chromium developers and testing infrastructure is using Visual Studio 2010. For this reason building Chromium with other compiler versions may result in compile or runtime errors. 
    * Beginning with trunk revision 1571 and the 1750 branch (January 2014) Visual Studio 2013 Professional can be used to build CEF/Chromium. You must use Ninja when building with VS2013 (set `GYP_GENERATORS=ninja` and `GYP_MSVS_VERSION=2013`).
    * If you wish to use Visual Studio for debugging and compiling in combination with a Ninja build you can set `GYP_GENERATORS=ninja,msvs-ninja` to generate both Ninja files and VS project files that will compile using Ninja.
  * Mac OS X -
    * When building on OS X 10.6+ the 10.5 SDK is no longer available. Older branches (<=1180) require that you set `GYP_DEFINES=mac_sdk=10.6` to use the 10.6 SDK. See [http://code.google.com/p/chromium/wiki/Xcode4Tips here] for more information.
    * 32-bit builds are no longer supported with 2272 branch and newer. See [https://groups.google.com/a/chromium.org/d/msg/chromium-dev/sdsDCkq_zwo/yep65H8Eg3sJ here] for the Chromium announcement.

=== Automated Method ===

CEF provides tools for automatically downloading, building and packaging Chromium and CEF source code. These tools are the recommended way of building CEF locally and can also be integrated with automated build systems like [http://www.jetbrains.com/teamcity/ TeamCity] or [http://jenkins-ci.org/ Jenkins].

===== Git workflow =====

These steps apply to the Git workflow only. The Git workflow is recommended for all users and supports CEF3 trunk and newer CEF3 release branches (1750+).

To use the Git workflow:

1. Download the automate-git.py script from [https://chromiumembedded.googlecode.com/svn/trunk/cef3/tools/automate/automate-git.py here].

2. Run the automate-git.py script at whatever interval is appropriate (for each CEF commit, once per day, once per week, etc).

To build trunk:

{{{
python /path/to/automate/automate-git.py --download-dir=/path/to/download
}}}

To build a release branch:

{{{
python /path/to/automate/automate-git.py --download-dir=/path/to/download --branch=1916
}}}

If the script succeeds a binary distribution package will be created in the “/path/to/download/chromium/src/cef/binary_distrib” directory. Future runs of the script will perform the minimum work necessary (unless otherwise configured using command-line flags). For example, if there are no pending CEF or Chromium updates the script will do nothing.

If you run the script and CEF or Chromium updates are pending the “/path/to/download/chromium/src/cef” directory will be removed and replaced with a clean copy from “/path/to/download/cef`_`(branch)” (specify the “--no-update” command-line flag to disable updates). Make sure to back up any changes that you made in the “/path/to/download/chromium/src/cef” directory before re-running the script.

The same download directory can be used for building multiple CEF branches (just specify a different “--branch” command-line value). The existing “/path/to/download/chromium/src/out” directory will be moved to “/path/to/download/out`_`(previousbranch)” so that the build output from the previous branch is not lost. When you switch back to a previous branch the out directory will be restored to its original location.

If you receive Git errors when moving an existing checkout from one branch to another you can force a clean Chromium Git checkout (specify the  “--force-clean” command-line flag) and optionally a clean download of Chromium dependencies (specify the “--force-clean-deps” command-line flag). Any build output that currently exists in the “src/out” directory will be deleted. Re-downloading the Chromium dependencies can take approximately 30 minutes with a reasonably fast internet connection.

Add the “--help” command-line switch to output a complete list of supported command-line options.

===== DEPRECATED SVN workflow (CEF1 and older CEF3 branches only) =====

These steps apply to the SVN workflow only. This workflow can be used for builds of CEF1 and older CEF3 release branches (<= 1650). Chromium development now uses Git instead of SVN so this workflow is no longer actively supported or tested and may break at any time.

To use the SVN workflow:

1. Download the automate.py tool for the branch that you’re building.

{{{
svn checkout http://chromiumembedded.googlecode.com/svn/branches/1650/cef3/tools/automate /path/to/automate
}}}

2. Run the automate.py script at whatever interval is appropriate (for each CEF commit, once per day, once per week, etc). Use the correct URL for the CEF version that you want to download and build.

{{{
python /path/to/automate/automate.py --download-dir=/path/to/download --url=http://chromiumembedded.googlecode.com/svn/branches/1650/cef3 --ninja-build
}}}

If the process succeeds a binary distribution package will be created in the /path/to/download/chromium/src/cef/binary_distrib directory.

Add the “--help” command-line switch to output a complete list of supported command-line options.

=== Manual Downloading  ===

Chromium and CEF can be downloaded and built as a manual process. This is more complicated and is not recommended for all users.

==== Development ====

These instructions apply only to the development (trunk) version of CEF1 and CEF3.

1. Install depot_tools as described [http://www.chromium.org/developers/how-tos/install-depot-tools here]. To avoid potential problems make sure the path is as short as possible and does not contain spaces or special characters.

2. Create a chromium checkout directory (for example, /path/to/chromium). To avoid potential problems make sure the path is as short as possible and does not contain spaces or special characters.

3. View the CHROMIUM_BUILD_COMPATIBILITY.txt file in the CEF top-level directory to identify what Chromium revision you need. This will change over time as CEF is updated to work with newer Chromium revisions.

===== Git workflow =====

This version of steps 4-7 applies to the Git workflow only. The Git workflow is recommended for all users and supports CEF3 trunk and newer CEF3 release branches (1750+). Complete instructions for using the Git workflow in Chromium are available [https://sites.google.com/a/chromium.org/dev/developers/how-tos/get-the-code here].

4. Download Chromium source code using the fetch tool included with depot_tools. This step only needs to be performed the first time Chromium code is checked out.

{{{
cd /path/to/chromium
fetch --nohooks chromium --nosvn=True
}}}

5. Find the git commit hash for the SVN revision number discovered in step #3. Newer CEF3 trunk revisions include the required hash as the “chromium_checkout” value in CHROMIUM_BUILD_COMPATIBILITY.txt.

Chromium switched from SVN to Git on August 26, 2014. For changes prior to that date the required hash for an SVN revision can be found using the command-line. In this example the desired SVN revision is “123456”:

{{{
cd /path/to/chromium/src
git log --grep=@123456 origin/master
}}}

6. Update the Chromium checkout to the required commit hash. DO NOT use 'git checkout commit_hash' directly because the sub-project dependencies will not be updated.

{{{
cd /path/to/chromium
gclient sync --revision <commit_hash> --jobs 16
}}}

7. Download CEF source code from the CEF Git repository to a "cef" directory inside the Chromium "src" directory. If Chromium code was downloaded to "/path/to/chromium/src" then CEF code should be downloaded to "/path/to/chromium/src/cef". Note that the directory must be named "cef".

{{{
cd /path/to/chromium/src
git clone https://chromiumembedded@bitbucket.org/chromiumembedded/trunk-cef3.git cef
}}}

The CEF Git repository is a read-only mirror of the SVN repository and pull requests will not be accepted. To submit changes please attach patch files generated with 'git diff --no-prefix' to issues in the CEF issue tracker.

===== DEPRECATED SVN workflow (CEF1 and older CEF3 branches only) =====

This version of steps 4-6 applies to the SVN workflow only. This workflow can be used for builds of CEF1 and older CEF3 release branches (<= 1650). Chromium development now uses Git instead of SVN so this workflow is no longer actively supported or tested and may break at any time.

4. Configure gclient to use the trunk branch.

{{{
cd /path/to/chromium
gclient config http://src.chromium.org/svn/trunk/src
}}}

5. Update the Chromium checkout to the revision number discovered in step #3.

{{{
cd /path/to/chromium
gclient sync --revision src@chromium_revision --jobs 16
}}}

6. Download CEF source code to a "cef" directory inside the Chromium "src" directory. You should download either CEF1 or CEF3 but not both. If Chromium code was downloaded to "/path/to/chromium/src" then CEF code should be downloaded to "/path/to/chromium/src/cef". Note that the directory must be named "cef" for both CEF1 and CEF3.

{{{
cd /path/to/chromium/src
svn co http://chromiumembedded.googlecode.com/svn/branches/1650/cef3 cef
}}}

==== Release Branch ====

These instructions apply only to release branches of CEF1 and CEF3.

1. Install depot_tools as described [http://www.chromium.org/developers/how-tos/install-depot-tools here]. To avoid potential problems make sure the path is as short as possible and does not contain spaces or special characters.

2. Create a chromium checkout directory (for example, /path/to/chromium). To avoid potential problems make sure the path is as short as possible and does not contain spaces or special characters.

3. View the CHROMIUM_BUILD_COMPATIBILITY.txt file in the CEF top-level directory to identify what Chromium release branch you need. This will change over time as CEF is updated to work with newer Chromium release branches.

===== Git workflow =====

This version of steps 4-7 applies to the Git workflow only. The Git workflow supports CEF3 trunk and newer CEF3 release branches (1750+). Complete instructions for using the Git workflow in Chromium are available [https://sites.google.com/a/chromium.org/dev/developers/how-tos/get-the-code here].

*WARNING: This workflow can only be used for building the release branch HEAD revision and cannot be used for building specific release versions. For correct release branch builds use the automate-git.py script instead.*

4. Download Chromium source code using the fetch tool included with depot_tools. This step only needs to be performed the first time Chromium code is checked out.

{{{
cd /path/to/chromium
fetch --nohooks chromium --nosvn=True
}}}

5. Download additional branch and tag information.

{{{
cd /path/to/chromium/src
gclient sync --nohooks --with_branch_heads
git fetch
}}}

6. Check out the release branch HEAD revision and update the third-party dependencies.

{{{
cd /path/to/chromium/src

# Check out the release branch HEAD revision. CEF may not build cleanly against this revision.
git checkout refs/remotes/branch-heads/1916

# Update third-party dependencies.
gclient sync --jobs 16
}}}

7. Download CEF source code from the CEF Git repository to a "cef" directory inside the Chromium "src" directory. If Chromium code was downloaded to "/path/to/chromium/src" then CEF code should be downloaded to "/path/to/chromium/src/cef". Note that the directory must be named "cef".

{{{
cd /path/to/chromium/src
git clone https://chromiumembedded@bitbucket.org/chromiumembedded/branches-1916-cef3.git cef
}}}

The CEF Git repository is a read-only mirror of the SVN repository and pull requests will not be accepted. To submit changes please attach patch files generated with 'git diff --no-prefix' to issues in the CEF issue tracker.

===== DEPRECATED SVN workflow (CEF1 and older CEF3 branches only) =====

This version of steps 4-6 applies to the SVN workflow only. This workflow can be used for builds of CEF1 and older CEF3 release branches (<= 1650). Chromium development now uses Git instead of SVN so this workflow is no longer actively supported or tested and may break at any time.

4. Configure gclient to use the release branch number discovered in step #3.

{{{
cd /path/to/chromium
gclient config http://src.chromium.org/svn/releases/31.0.1650.57
}}}

5. Download the Chromium source code.

{{{
cd /path/to/chromium
gclient sync --jobs 16
}}}

6. Download the CEF source code to a "cef" directory inside the Chromium "src" directory. You should download either CEF1 or CEF3 but not both. If Chromium code was downloaded to "/path/to/chromium/src" then CEF code should be downloaded to "/path/to/chromium/src/cef". Note that the directory must be named "cef" for both CEF1 and CEF3.

{{{
cd /path/to/chromium/src
svn co http://chromiumembedded.googlecode.com/svn/branches/1650/cef3 cef
}}}

=== Manual Building ===

1. Run the cef_create_projects script (.bat on Windows, .sh on OS X and Linux) to generate the build files based on the [http://code.google.com/p/gyp/ GYP] configuration.

{{{
cd /path/to/chromium/src/cef
./cef_create_projects.sh
}}}

2. Build CEF.

Ninja is now the recommended and supported method for building CEF3/Chromium on all platforms when using newer release branches (1453+) and trunk.

{{{
export GYP_GENERATORS='ninja'
cd /path/to/chromium/src/cef
./cef_create_projects.sh
cd /path/to/chromium/src
ninja -C out/Debug cefclient cef_unittests
}}}

Linux only: When using the 1750 branch or newer you must also build the chrome_sandbox target and install it as described on the [https://code.google.com/p/chromium/wiki/LinuxSUIDSandboxDevelopment LinuxSUIDSandboxDevelopment] wiki page.

Older release branches (<=1547) support building with the system build tools.

  * Windows - Open the Visual Studio solution file and build.
  * Mac OS X - Open the Xcode project file and build.
  * Linux - Run "make -j4 cefclient" from the Chromium "src" directory.

Alternately, older release branches (<=1547) can use the build_projects script (.bat on Windows, .sh on OS X and Linux) to build on the command line using the default system build tools.

{{{
cd /path/to/chromium/src/cef/tools
./build_projects.sh Debug
}}}

=== Manual Packaging ===

After building both Debug and Release configurations you can use the make_distrib tool (.bat on Windows, .sh on OS X and Linux) to create a binary distribution.

{{{
cd /path/to/chromium/src/cef/tools
# If using a Ninja build:
./make_distrib.sh --ninja-build
# If using default system build tools:
./make_distrib.sh
}}}

If the process succeeds a binary distribution package will be created in the /path/to/chromium/src/cef/binary_distrib directory.

See the [http://code.google.com/p/chromiumembedded/source/browse/trunk/cef3/tools/make_distrib.py#140 make_distrib.py] script for additional usage options.